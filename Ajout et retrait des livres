#include <iostream>
#include <sqlite3.h>
#include <string>

// Classe pour gérer la librairie
class Librairie {
private:
    sqlite3* db; // Pointeur vers la base de données SQLite

public:
    // Constructeur : initialise la connexion à la base de données
    Librairie() {
        // Ouvre la connexion à la base de données
        int rc = sqlite3_open("librairie.db", &db);
        if (rc) {
            std::cerr << "Erreur d'ouverture de la base de données : " << sqlite3_errmsg(db) << std::endl;
            return;
        }

        // Crée la table 'livres' si elle n'existe pas déjà
        const char* sql = "CREATE TABLE IF NOT EXISTS livres ("
                          "id INTEGER PRIMARY KEY AUTOINCREMENT,"
                          "titre TEXT NOT NULL,"
                          "auteur TEXT NOT NULL,"
                          "annee INTEGER);";
        
        char* errMsg = nullptr;
        rc = sqlite3_exec(db, sql, nullptr, nullptr, &errMsg);
        if (rc != SQLITE_OK) {
            std::cerr << "Erreur SQL : " << errMsg << std::endl;
            sqlite3_free(errMsg);
        }
    }

    // Destructeur : ferme la connexion à la base de données
    ~Librairie() {
        sqlite3_close(db);
    }

    // Méthode pour ajouter un livre
    void ajouterLivre(const std::string& titre, const std::string& auteur, int annee);

    // Méthode pour retirer un livre
    void retirerLivre(int id);
};

// Implémentation de la méthode pour ajouter un livre
void Librairie::ajouterLivre(const std::string& titre, const std::string& auteur, int annee) {
    // Prépare la requête SQL pour l'insertion
    std::string sql = "INSERT INTO livres (titre, auteur, annee) VALUES (?, ?, ?);";
    sqlite3_stmt* stmt;

    // Prépare la déclaration SQL
    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) == SQLITE_OK) {
        // Lie les paramètres à la requête
        sqlite3_bind_text(stmt, 1, titre.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 2, auteur.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 3, annee);

        // Exécute la requête
        if (sqlite3_step(stmt) != SQLITE_DONE) {
            std::cerr << "Erreur lors de l'ajout du livre : " << sqlite3_errmsg(db) << std::endl;
        } else {
            std::cout << "Livre ajouté avec succès." << std::endl;
        }
    } else {
        std::cerr << "Erreur de préparation de la requête : " << sqlite3_errmsg(db) << std::endl;
    }

    // Finalise la déclaration (libère les ressources)
    sqlite3_finalize(stmt);
}

// Implémentation de la méthode pour retirer un livre
void Librairie::retirerLivre(int id) {
    // Prépare la requête SQL pour la suppression
    std::string sql = "DELETE FROM livres WHERE id = ?;";
    sqlite3_stmt* stmt;

    // Prépare la déclaration SQL
    if (sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, nullptr) == SQLITE_OK) {
        // Lie le paramètre ID à la requête
        sqlite3_bind_int(stmt, 1, id);

        // Exécute la requête
        if (sqlite3_step(stmt) != SQLITE_DONE) {
            std::cerr << "Erreur lors du retrait du livre : " << sqlite3_errmsg(db) << std::endl;
        } else {
            std::cout << "Livre retiré avec succès." << std::endl;
        }
    } else {
        std::cerr << "Erreur de préparation de la requête : " << sqlite3_errmsg(db) << std::endl;
    }

    // Finalise la déclaration (libère les ressources)
    sqlite3_finalize(stmt);
}

int main() {
    // Crée une instance de la classe Librairie
    Librairie lib;

    // Exemples d'utilisation
    lib.ajouterLivre("1984", "George Orwell", 1949);
    lib.ajouterLivre("Le Petit Prince", "Antoine de Saint-Exupéry", 1943);
    lib.retirerLivre(1);  // Retire le livre avec l'ID 1

    return 0;
}
